<?php

/**
 * @file
 * Implements the display of the Cookie Control pop-up dialog.
 *
 * Module developed by Civic UK www.civicuk.com.
 * JavaScript developed by Civic UK www.civicuk.com.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function civiccookiecontrol_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        case 'help.page.civiccookiecontrol':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= "<p> With an elegant  user-interface that doesn't hurt the look and feel of your site, Cookie Control is a mechanism for controlling user consent for the use of cookies on their computer.</p>"
                . "<p> For more information, please visit Civic's Cookie Control pages" . ' at: <a href="http://www.civicuk.com/cookie-law/index" title="Cookie Control by Civic" target="_blank">http://www.civicuk.com/cookie-law/index</a></p>'
                . '<a class="civic" href="http://www.civicuk.com/cookie-law/pricing" target="_blank">Get Your API Key</a><p>';
            return $output;
    }
}

/**
 * Implements hook_theme().
 */
function civiccookiecontrol_theme()
{
    return [
        'page__admin__config__system__cookiecontrol' => [
            'render element' => 'form',
            'template' => 'page--admin--config--system--cookiecontrol',
        ],
        'page__admin__config__cookiecontrol__system__necessarycookie' => [
            'render element' => 'page',
            'template' => 'page--admin--config--cookiecontrol--system--necessarycookie',
        ],
        'page__admin__config__system__cookiecontrol__cookiecategory' => [
            'render element' => 'page',
            'template' => 'page--admin--config--system--cookiecontrol--cookiecategory',
        ],
        'page__admin__config__system__cookiecontrol__excludedcountry' => [
            'render element' => 'page',
            'template' => 'page--admin--config--system--cookiecontrol--excludedcountry',
        ],
        'page__admin__config__system__cookiecontrol__altlanguage' => [
            'render element' => 'page',
            'template' => 'page--admin--config--system--cookiecontrol--altlanguage',
        ],
    ];
}

/**
 * Implements hook_link_alter().
 */
function civiccookiecontrol_link_alter(&$variables)
{

    if ( array_key_exists('data-drupal-link-system-path', $variables['options']['attributes']) &&
        (strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/cookiecategory/add') !== FALSE ||
        strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/necessarycookie/add') !== FALSE ||
        strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/excludedcountry/add') !== FALSE ||
        strpos($variables['options']['attributes']['data-drupal-link-system-path'], 'admin/config/system/cookiecontrol/altlanguage/add') !== FALSE)
    ) {
        $variables['options']['attributes']['class'][] = 'use-ajax';
        // off_canvas could be used as an alternative.
        $variables['options']['attributes']['data-dialog-type'][] = 'dialog';
        $variables['options']['attributes']['data-dialog-options'][] = Json::encode(['width' => 700]);
    }
}

/**
 * Implements hook_page_attachments().
 */
function civiccookiecontrol_page_attachments(array &$page)
{
    if (\Drupal::config('iab.settings')->get('iabCMP')==true) {
        $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol.header';
    }else{
        $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol';
    }
    $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol.settings';
    $page['#attached']['library'][] = 'civiccookiecontrol/civiccookiecontrol.admin_css';
    // don't render on admin pages or excluded paths.
    $route = \Drupal::routeMatch()->getRouteObject();
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);

    $page['#attached']['drupalSettings']['path'] = [
        'civiccookiecontrol_path' => drupal_get_path('module', 'civiccookiecontrol'),
    ];
    if (!$is_admin || \Drupal::config('civiccookiecontrol.settings')->get('civiccookiecontrol_drupal_admin')) {
        $page['#attached']['drupalSettings']['civiccookiecontrol'] = _load_cookie_config();
    }
}

/**
 * Function to check if cookie categories are defined.
 */
function _check_cookie_categories()
{
    if (empty(_load_cookie_category_list()) && (\Drupal\civiccookiecontrol\Access\CookieControlAccess::checkApiKey())) {
        $messenger = \Drupal::messenger();
        $messenger->addMessage(t('You need to add at least <b>one</b> <a href="/admin/config/system/cookiecontrol/cookiecategory">Cookie Category</a> for the Cookie Control module to properly operate.'), $messenger::TYPE_ERROR);
    }
}

/**
 * Function to load cookie category entities.
 */
function _load_cookie_category_list()
{
    $cookieCategories = \Drupal::entityTypeManager()
        ->getStorage('cookiecategory')
        ->loadMultiple();
    $cookieCategoriesRetArray = [];
    foreach ($cookieCategories as $cookieCat) {
        $cookieCategory = [];
        $cookieCategory['name'] = $cookieCat->getCookieName();
        $cookieCategory['label'] = $cookieCat->getCookieLabel();
        $cookieCategory['description'] = $cookieCat->getCookieDescription();
        $cookieCategory['cookies'] = explode(',', $cookieCat->getCookies());
        $cookieCategory['onAccept'] = "function(){" . $cookieCat->getOnAcceptCallBack() . "}";
        $cookieCategory['onRevoke'] = "function(){" . $cookieCat->getOnRevokeCallBack() . "}";
        $cookieCategory['recommendedState'] = $cookieCat->getRecommendedState();
        $cookieCategory['lawfulBasis'] = $cookieCat->getlawfulBasis();
        if ((int)$cookieCat->getThirdPartyCookiesCount() > 0) {
            $cookieCategory['thirdPartyCookies'] = '[' . str_replace(';', ',', stripslashes($cookieCat->getThirdPartyCookies())) . ']';
        }

        $cookieCategoriesRetArray[] = $cookieCategory;
    }

    return $cookieCategoriesRetArray;
}

/**
 * Function to load necessary cookies list.
 */
function _load_necessary_cookie_list()
{
    $necessaryCookies = \Drupal::entityTypeManager()
        ->getStorage('necessarycookie')
        ->loadMultiple();
    $necessaryCookiesRetArray = [];

    foreach ($necessaryCookies as $necCookie) {
        $necessaryCookiesRetArray[] = $necCookie->getNecessaryCookieName();
    }

    return $necessaryCookiesRetArray;
}

/**
 * Function to load excluded countries list.
 */
function _load_excluded_country_list()
{
    $excludedCountries = \Drupal::entityTypeManager()
        ->getStorage('excludedcountry')
        ->loadMultiple();
    $excludedCountryRetArray = [];

    foreach ($excludedCountries as $exclCountry) {
        $excludedCountryRetArray[] = $exclCountry->getExcludedCountryIsoCode();
    }

    return $excludedCountryRetArray;
}

/**
 * Function to load alternative languages list.
 */
function _load_alt_languages_list()
{
    $altLanguages = \Drupal::entityTypeManager()
        ->getStorage('altlanguage')
        ->loadMultiple();
    $locales = [];

    foreach ($altLanguages as $altLang) {
        $locale['locale'] = $altLang->getAltLanguageIsoCode();
        $locale['text']['title'] = $altLang->getAltLanguageTitle();
        $locale['text']['intro'] = $altLang->getAltLanguageIntro();
        $locale['text']['acceptRecommended'] = $altLang->getAltLanguageAcceptRecommended();
        $locale['text']['rejectSettings'] = $altLang->getAltLanguageRejectSettings();
        $locale['text']['necessaryTitle'] = $altLang->getAltLanguageNecessaryTitle();
        $locale['text']['necessaryDescription'] = $altLang->getAltLanguageNecessaryDescription();
        $locale['text']['thirdPartyTitle'] = $altLang->getAltLanguageThirdPartyTitle();
        $locale['text']['thirdPartyDescription'] = $altLang->getAltLanguageThirdPartyDescription();
        $locale['text']['on'] = $altLang->getAltLanguageOn();
        $locale['text']['off'] = $altLang->getAltLanguageOff();
        $locale['text']['notifyTitle'] = $altLang->getAltLanguageNotifyTitle();
        $locale['text']['notifyDescription'] = $altLang->getAltLanguageNotifyDescription();
        $locale['text']['accept'] = $altLang->getAltLanguageAccept();
        $locale['text']['reject'] = $altLang->getAltLanguageReject();
        $locale['text']['settings'] = $altLang->getAltLanguageSettings();
        $locale['text']['closeLabel'] = $altLang->getAltLanguageCloseLabel();
        $locale['text']['accessibilityAlert'] = $altLang->getAltLanguageAccessibilityAlert();
        $locale['text']['optionalCookies'] = stripslashes($altLang->getAltLanguageOptionalCookies());
        $locale['text']['statement']['description'] = $altLang->getAltLanguageStmtDescrText();
        $locale['text']['statement']['name'] = $altLang->getAltLanguageStmtNameText();
        if ($nid = $altLang->getAltLanguageStmtUrl()) {
            $privacyNodeUrl = Link::createFromRoute($altLang->getAltLanguageStmtUrl(), 'entity.node.canonical', ['node' => $nid]);
            global $base_url;
            $locale['text']['statement']['url'] = $base_url . $privacyNodeUrl->getUrl()
                    ->toString();
        }
        //$locale['statement']['url'] = $altLang->getAltLanguageStmtUrl();
        $locale['text']['statement']['updated'] = !empty($altLang->getAltLanguageStmtDate()) ? format_date(strtotime($altLang->getAltLanguageStmtDate()), 'custom', 'd/m/y') : NULL;

        $locale['text']['iabCMP']['label'] = $altLang->getAltLanguageIabLabelText();
        $locale['text']['iabCMP']['description'] = $altLang->getAltLanguageIabDescriptionText();
        $locale['text']['iabCMP']['configure'] = $altLang->getAltLanguageIabConfigureText();
        $locale['text']['iabCMP']['panelTitle'] = $altLang->getAltLanguageIabPanelTitleText();
        $locale['text']['iabCMP']['panelIntro'] = $altLang->getAltLanguageIabPanelIntroText();
        $locale['text']['iabCMP']['aboutIab'] = $altLang->getAltLanguageIabAboutIabText();
        $locale['text']['iabCMP']['iabName'] = $altLang->getAltLanguageIabIabNameText();
        $locale['text']['iabCMP']['iabLink'] = $altLang->getAltLanguageIabIabLinkText();
        $locale['text']['iabCMP']['panelBack'] = $altLang->getAltLanguageIabPanelBackText();
        $locale['text']['iabCMP']['vendorTitle'] = $altLang->getAltLanguageIabVendorTitleText();
        $locale['text']['iabCMP']['vendorConfigure'] = $altLang->getAltLanguageIabVendorConfigureText();
        $locale['text']['iabCMP']['vendorBack'] = $altLang->getAltLanguageIabVendorBackText();
        $locale['text']['iabCMP']['acceptAll'] = $altLang->getAltLanguageIabAcceptAllText();
        $locale['text']['iabCMP']['rejectAll'] = $altLang->getAltLanguageIabRejectAllText();
        $locale['text']['iabCMP']['back'] = $altLang->getAltLanguageIabBackText();

        $locales[] = $locale;
    }

    return $locales;
}

function _load_statement_obj(&$config,$cccConfig){
    $config['statement'] = [
        'description' => $cccConfig
            ->get('civiccookiecontrol_stmt_descr'),
        'name' => $cccConfig
            ->get('civiccookiecontrol_stmt_name'),
        'updated' => !empty($cccConfig
            ->get('civiccookiecontrol_stmt_date')) ? \Drupal::service('date.formatter')->format(strtotime($cccConfig
            ->get('civiccookiecontrol_stmt_date')), 'custom', 'd/m/y') : NULL,
    ];
    if ($nid = $cccConfig->get('civiccookiecontrol_privacynode')) {
        $privacyNodeUrl = Link::createFromRoute(t("Privacy Policy"), 'entity.node.canonical', ['node' => $nid]);
        global $base_url;
        $config['statement']['url'] = $base_url . $privacyNodeUrl->getUrl()
                ->toString();
    }
}

function _load_accessibility_obj(&$config,$cccConfig){
    $config['accessibility'] = [
        'accessKey' => $cccConfig
            ->get('civiccookiecontrol_access_key'),
        'highlightFocus' => $cccConfig
            ->get('civiccookiecontrol_highlight_focus'),
    ];
}

function _load_text_obj(&$config, $cccConfig, $iabConfig){
    $config['text'] = [
        'title' => $cccConfig
            ->get('civiccookiecontrol_title_text'),
        'intro' => $cccConfig
            ->get('civiccookiecontrol_intro_text'),
        'acceptRecommended' => $cccConfig
            ->get('civiccookiecontrol_accept_recommended'),
        'rejectSettings' => $cccConfig
            ->get('civiccookiecontrol_reject_settings'),
        'necessaryTitle' => $cccConfig
            ->get('civiccookiecontrol_necessary_title_text'),
        'necessaryDescription' => $cccConfig
            ->get('civiccookiecontrol_necessary_desc_text'),
        'thirdPartyTitle' => $cccConfig
            ->get('civiccookiecontrol_third_party_title_text'),
        'thirdPartyDescription' => $cccConfig
            ->get('civiccookiecontrol_third_party_desc_text'),
        'on' => $cccConfig
            ->get('civiccookiecontrol_on_text'),
        'off' => $cccConfig
            ->get('civiccookiecontrol_off_text'),
        'notifyTitle' => $cccConfig
            ->get('civiccookiecontrol_notify_title_text'),
        'notifyDescription' => $cccConfig
            ->get('civiccookiecontrol_notify_desc_text'),
        'accept' => $cccConfig
            ->get('civiccookiecontrol_accept_text'),
        'reject' => $cccConfig
            ->get('civiccookiecontrol_reject_text'),
        'settings' => $cccConfig
            ->get('civiccookiecontrol_setting_text'),
        'closeLabel' => $cccConfig
            ->get('civiccookiecontrol_close_label'),
        'accessibilityAlert' => $cccConfig
            ->get('civiccookiecontrol_accessibility_alert'),
        'iabCMP' => _iab_text_obj($iabConfig),
    ];
}

function _iab_text_obj($iabConfig){
    $iabText=[];
    $iabText['label'] = $iabConfig->get('iabLabelText');
    $iabText['description'] = $iabConfig->get('iabDescriptionText');
    $iabText['configure'] = $iabConfig->get('iabConfigureText');
    $iabText['panelTitle'] = $iabConfig->get('iabPanelTitleText');
    $iabText['panelIntro'] = $iabConfig->get('iabPanelIntroText');
    $iabText['aboutIab'] = $iabConfig->get('iabAboutIabText');
    $iabText['iabName'] = $iabConfig->get('iabIabNameText');
    $iabText['iabLink'] = $iabConfig->get('iabIabLinkText');
    $iabText['panelBack'] = $iabConfig->get('iabPanelBackText');
    $iabText['vendorTitle'] = $iabConfig->get('iabVendorTitleText');
    $iabText['vendorConfigure'] = $iabConfig->get('iabVendorConfigureText');
    $iabText['vendorBack'] = $iabConfig->get('iabVendorBackText');
    $iabText['acceptAll'] = $iabConfig->get('iabAcceptAllText');
    $iabText['rejectAll'] = $iabConfig->get('iabRejectAllText');
    $iabText['back'] = $iabConfig->get('iabBackText');

    return $iabText;
}

function _load_branding_obj(&$config, $cccConfig){
    $config['branding'] = [
        'fontFamily' => $cccConfig
            ->get('civiccookiecontrol_font_family'),
        'fontSizeTitle' => $cccConfig
                ->get('civiccookiecontrol_font_size_title') . 'em',
        'fontSizeHeaders' => $cccConfig
            ->get('civiccookiecontrol_font_size_headers'),
        'fontSize' => $cccConfig
                ->get('civiccookiecontrol_font_size') . 'em',
        'fontColor' => $cccConfig
            ->get('civiccookiecontrol_font_color'),
        'backgroundColor' => $cccConfig
            ->get('civiccookiecontrol_background_color'),
        'acceptText' => $cccConfig
            ->get('civiccookiecontrol_accept_text_color'),
        'acceptBackground' => $cccConfig
            ->get('civiccookiecontrol_accept_background_color'),
        'toggleText' => $cccConfig
            ->get('civiccookiecontrol_toggle_text'),
        'toggleColor' => $cccConfig
            ->get('civiccookiecontrol_toggle_color'),
        'toggleBackground' => $cccConfig
            ->get('civiccookiecontrol_toggle_background'),
        'alertText' => $cccConfig
            ->get('civiccookiecontrol_alert_text'),
        'alertBackground' => $cccConfig
            ->get('civiccookiecontrol_alert_background'),
        'buttonIcon' => $cccConfig
            ->get('civiccookiecontrol_button_icon'),
        'buttonIconWidth' => $cccConfig
                ->get('civiccookiecontrol_button_icon_width') . 'px',
        'buttonIconHeight' => $cccConfig
                ->get('civiccookiecontrol_button_icon_height') . 'px',
        'removeIcon' => $cccConfig
            ->get('civiccookiecontrol_remove_icon') ? TRUE : FALSE,
        'removeAbout' => $cccConfig
            ->get('civiccookiecontrol_remove_about_text') ? TRUE : FALSE,
        /*      'fontSizeIntro' => $cccConfig
                ->get('civiccookiecontrol_font_size_intro') . 'em',*/

    ];
    // $config['branding'] = array_filter($config['bradning']);.
    foreach ($config['branding'] as $key => $item) {
        if (empty($config['branding'][$key])) {
            unset($config['branding'][$key]);
        }
    }
}
/**
 * Function to construct cookie configuration object.
 */
function _load_cookie_config()
{
    $cid = 'civiccookiecontrol_config';
    $response = &drupal_static(__FUNCTION__);

    if ($cache = \Drupal::cache()->get($cid)) {
        $response = $cache->data;
    } else {
        $cccConfig = \Drupal::config('civiccookiecontrol.settings');
        $iabConfig = \Drupal::config('iab.settings');

        $config['apiKey'] = $cccConfig
            ->get('civiccookiecontrol_api_key');
        $config['product'] = $cccConfig
            ->get('civiccookiecontrol_product');
        $config['logConsent'] = $cccConfig
            ->get('civiccookiecontrol_log_consent') ? TRUE : FALSE;
        $config['iabCMP'] = $iabConfig
            ->get('iabCMP') ? TRUE : FALSE;
        $config['iabConfig']['gdprAppliesGlobally'] = $iabConfig
            ->get('iabGdprAppliesGlobally') ? TRUE : FALSE;
        $config['iabConfig']['recommendedState'] = Json::decode($iabConfig
            ->get('iabRecommendedState'));
        $config['encodeCookie'] = $cccConfig
            ->get('civiccookiecontrol_encode_cookie') ? TRUE : FALSE;
        $config['subDomains'] = $cccConfig
            ->get('civiccookiecontrol_sub_domains') ? TRUE : FALSE;
        $config['notifyOnce'] = $cccConfig
            ->get('civiccookiecontrol_notify_once') ? TRUE : FALSE;
        $config['rejectButton'] = $cccConfig
            ->get('civiccookiecontrol_reject_button') ? TRUE : FALSE;
        $config['toggleType'] = $cccConfig
            ->get('civiccookiecontrol_toggle_type');
        $config['closeStyle'] = $cccConfig
            ->get('civiccookiecontrol_close_style');
        $config['settingsStyle'] = $cccConfig
            ->get('civiccookiecontrol_settings_style');
        $config['initialState'] = $cccConfig
            ->get('civiccookiecontrol_initial_state');
        $config['layout'] = $cccConfig
            ->get('civiccookiecontrol_layout');
        $config['position'] = $cccConfig
            ->get('civiccookiecontrol_widget_position');
        $config['theme'] = $cccConfig
            ->get('civiccookiecontrol_widget_theme');
        $config['onLoad'] = "function(){" . $cccConfig
                ->get('civiccookiecontrol_onload') . "}";
        _load_statement_obj($config,$cccConfig);
        _load_accessibility_obj($config,$cccConfig);
        _load_text_obj($config,$cccConfig, $iabConfig);
        _load_branding_obj($config,$cccConfig);

        $config['necessaryCookies'] = _load_necessary_cookie_list();
        $config['optionalCookies'] = _load_cookie_category_list();

        $config['excludedCountries'] = _load_excluded_country_list();
        $config['locales'] = _load_alt_languages_list();
        $config['debug'] = $cccConfig
            ->get('civiccookiecontrol_debug') ? TRUE : FALSE;

        $response = Json::encode(array_filter($config));
        \Drupal::cache()->set($cid, $response);

    }
    return $response;
}

/**
 * Function to check if a configuration element is empty.
 */
function _check_if_empty($configElement)
{
    if (is_array($configElement) && !empty($configElement)) {
        return $configElement;
    }

    if ($configElement != "" || !empty($configElement)) {
        return $configElement;
    }
}

/**
 * Implements hook_preprocess().
 */
/**
 * Implements hook_preprocess().
 */
function civiccookiecontrol_preprocess_page__admin__config__system__cookiecontrol(&$variables)
{
    if (\Drupal\civiccookiecontrol\Access\CookieControlAccess::checkApiKey()) {
        $variables['ccc_messages'] = t('Cookie Control will load with its own preset styling and text configuration. You can customize your widget initial state, position, theme and text with the following options.');
    }else{
        $variables['ccc_messages'] = t('Please provide a valid Cookie Control API key to proceed.');
    }
}
